// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/middlewares/trace.go
//
// Generated by this command:
//
//	mockgen -source=internal/config/middlewares/trace.go -destination=internal/config/middlewares/trace_mock.go -package=middlewares
//

// Package middlewares is a generated GoMock package.
package middlewares

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTraceMiddleware is a mock of TraceMiddleware interface.
type MockTraceMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockTraceMiddlewareMockRecorder
	isgomock struct{}
}

// MockTraceMiddlewareMockRecorder is the mock recorder for MockTraceMiddleware.
type MockTraceMiddlewareMockRecorder struct {
	mock *MockTraceMiddleware
}

// NewMockTraceMiddleware creates a new mock instance.
func NewMockTraceMiddleware(ctrl *gomock.Controller) *MockTraceMiddleware {
	mock := &MockTraceMiddleware{ctrl: ctrl}
	mock.recorder = &MockTraceMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraceMiddleware) EXPECT() *MockTraceMiddlewareMockRecorder {
	return m.recorder
}

// Trace mocks base method.
func (m *MockTraceMiddleware) Trace(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Trace indicates an expected call of Trace.
func (mr *MockTraceMiddlewareMockRecorder) Trace(next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockTraceMiddleware)(nil).Trace), next)
}
