// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/services/authentication.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/services/authentication.go -destination=internal/app/services/authentication_mock.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	serializers "biinge-api/internal/app/serializers"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthentication is a mock of Authentication interface.
type MockAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationMockRecorder
	isgomock struct{}
}

// MockAuthenticationMockRecorder is the mock recorder for MockAuthentication.
type MockAuthenticationMockRecorder struct {
	mock *MockAuthentication
}

// NewMockAuthentication creates a new mock instance.
func NewMockAuthentication(ctrl *gomock.Controller) *MockAuthentication {
	mock := &MockAuthentication{ctrl: ctrl}
	mock.recorder = &MockAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthentication) EXPECT() *MockAuthenticationMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthentication) Login(ctx context.Context, request *serializers.LoginRequestSerializer) (*serializers.TokenSerializer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request)
	ret0, _ := ret[0].(*serializers.TokenSerializer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthenticationMockRecorder) Login(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthentication)(nil).Login), ctx, request)
}

// Registration mocks base method.
func (m *MockAuthentication) Registration(ctx context.Context, request *serializers.RegistrationRequestSerializer) (*serializers.TokenSerializer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", ctx, request)
	ret0, _ := ret[0].(*serializers.TokenSerializer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registration indicates an expected call of Registration.
func (mr *MockAuthenticationMockRecorder) Registration(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockAuthentication)(nil).Registration), ctx, request)
}
