// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movies.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
  user_id,
  tmdb_id,
  title,
  poster_path,
  runtime,
  state
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING
  id,
  user_id,
  tmdb_id,
  title,
  poster_path,
  pinned,
  runtime,
  state,
  created_at,
  updated_at
`

type CreateMovieParams struct {
	UserID     uuid.UUID
	TmdbID     uint64
	Title      string
	PosterPath string
	Runtime    uint64
	State      StateTypes
}

type CreateMovieRow struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	TmdbID     uint64
	Title      string
	PosterPath string
	Pinned     bool
	Runtime    uint64
	State      StateTypes
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (CreateMovieRow, error) {
	row := q.db.QueryRow(ctx, createMovie,
		arg.UserID,
		arg.TmdbID,
		arg.Title,
		arg.PosterPath,
		arg.Runtime,
		arg.State,
	)
	var i CreateMovieRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TmdbID,
		&i.Title,
		&i.PosterPath,
		&i.Pinned,
		&i.Runtime,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMovie, id)
	return err
}

const deleteMovieByTmdbId = `-- name: DeleteMovieByTmdbId :exec
DELETE FROM movies WHERE tmdb_id = $1 AND user_id = $2
`

type DeleteMovieByTmdbIdParams struct {
	TmdbID uint64
	UserID uuid.UUID
}

func (q *Queries) DeleteMovieByTmdbId(ctx context.Context, arg DeleteMovieByTmdbIdParams) error {
	_, err := q.db.Exec(ctx, deleteMovieByTmdbId, arg.TmdbID, arg.UserID)
	return err
}

const findMovieById = `-- name: FindMovieById :one
SELECT
  id,
  user_id,
  tmdb_id,
  title,
  poster_path,
  runtime,
  pinned,
  state,
  created_at,
  updated_at
FROM movies
WHERE id = $1 LIMIT 1
`

type FindMovieByIdRow struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	TmdbID     uint64
	Title      string
	PosterPath string
	Runtime    uint64
	Pinned     bool
	State      StateTypes
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

func (q *Queries) FindMovieById(ctx context.Context, id uuid.UUID) (FindMovieByIdRow, error) {
	row := q.db.QueryRow(ctx, findMovieById, id)
	var i FindMovieByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TmdbID,
		&i.Title,
		&i.PosterPath,
		&i.Runtime,
		&i.Pinned,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findMovieByTmdbId = `-- name: FindMovieByTmdbId :one
SELECT
  id,
  user_id,
  tmdb_id,
  title,
  poster_path,
  runtime,
  pinned,
  state,
  created_at,
  updated_at
FROM movies
WHERE tmdb_id = $1 AND user_id = $2 LIMIT 1
`

type FindMovieByTmdbIdParams struct {
	TmdbID uint64
	UserID uuid.UUID
}

type FindMovieByTmdbIdRow struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	TmdbID     uint64
	Title      string
	PosterPath string
	Runtime    uint64
	Pinned     bool
	State      StateTypes
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

func (q *Queries) FindMovieByTmdbId(ctx context.Context, arg FindMovieByTmdbIdParams) (FindMovieByTmdbIdRow, error) {
	row := q.db.QueryRow(ctx, findMovieByTmdbId, arg.TmdbID, arg.UserID)
	var i FindMovieByTmdbIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TmdbID,
		&i.Title,
		&i.PosterPath,
		&i.Runtime,
		&i.Pinned,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findMoviesByState = `-- name: FindMoviesByState :many
WITH counter AS (
  SELECT COUNT(*) AS total
  FROM movies
  WHERE user_id = $1 AND state = $2
)
SELECT
  m.id,
  m.user_id,
  m.tmdb_id,
  m.title,
  m.poster_path,
  m.runtime,
  m.pinned,
  m.state,
  m.created_at,
  m.updated_at,
  counter.total
FROM movies m CROSS JOIN counter
WHERE m.user_id = $1 AND m.state = $2
ORDER BY m.pinned DESC, m.created_at DESC LIMIT $3 OFFSET $4
`

type FindMoviesByStateParams struct {
	UserID uuid.UUID
	State  StateTypes
	Limit  uint64
	Offset uint64
}

type FindMoviesByStateRow struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	TmdbID     uint64
	Title      string
	PosterPath string
	Runtime    uint64
	Pinned     bool
	State      StateTypes
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	Total      uint64
}

func (q *Queries) FindMoviesByState(ctx context.Context, arg FindMoviesByStateParams) ([]FindMoviesByStateRow, error) {
	rows, err := q.db.Query(ctx, findMoviesByState,
		arg.UserID,
		arg.State,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindMoviesByStateRow
	for rows.Next() {
		var i FindMoviesByStateRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TmdbID,
			&i.Title,
			&i.PosterPath,
			&i.Runtime,
			&i.Pinned,
			&i.State,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findMoviesByTmdbIds = `-- name: FindMoviesByTmdbIds :many
SELECT
  id,
  user_id,
  tmdb_id,
  title,
  poster_path,
  runtime,
  pinned,
  state,
  created_at,
  updated_at
FROM movies
WHERE tmdb_id = ANY($1::integer[]) AND user_id = $2
`

type FindMoviesByTmdbIdsParams struct {
	TmdbIds []uint64
	UserID  uuid.UUID
}

type FindMoviesByTmdbIdsRow struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	TmdbID     uint64
	Title      string
	PosterPath string
	Runtime    uint64
	Pinned     bool
	State      StateTypes
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

func (q *Queries) FindMoviesByTmdbIds(ctx context.Context, arg FindMoviesByTmdbIdsParams) ([]FindMoviesByTmdbIdsRow, error) {
	rows, err := q.db.Query(ctx, findMoviesByTmdbIds, arg.TmdbIds, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindMoviesByTmdbIdsRow
	for rows.Next() {
		var i FindMoviesByTmdbIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TmdbID,
			&i.Title,
			&i.PosterPath,
			&i.Runtime,
			&i.Pinned,
			&i.State,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET
  title = $2,
  poster_path = $3,
  runtime = $4,
  updated_at = NOW()
WHERE id = $1
RETURNING
  id,
  user_id,
  tmdb_id,
  title,
  poster_path,
  runtime,
  pinned,
  state,
  created_at,
  updated_at
`

type UpdateMovieParams struct {
	ID         uuid.UUID
	Title      string
	PosterPath string
	Runtime    uint64
}

type UpdateMovieRow struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	TmdbID     uint64
	Title      string
	PosterPath string
	Runtime    uint64
	Pinned     bool
	State      StateTypes
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (UpdateMovieRow, error) {
	row := q.db.QueryRow(ctx, updateMovie,
		arg.ID,
		arg.Title,
		arg.PosterPath,
		arg.Runtime,
	)
	var i UpdateMovieRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TmdbID,
		&i.Title,
		&i.PosterPath,
		&i.Runtime,
		&i.Pinned,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMovieByTmdbId = `-- name: UpdateMovieByTmdbId :one
UPDATE movies
SET
  state = $3,
  pinned = $4,
  updated_at = NOW()
WHERE tmdb_id = $1 AND user_id = $2
RETURNING
  id,
  user_id,
  tmdb_id,
  title,
  poster_path,
  runtime,
  pinned,
  state,
  created_at,
  updated_at
`

type UpdateMovieByTmdbIdParams struct {
	TmdbID uint64
	UserID uuid.UUID
	State  StateTypes
	Pinned bool
}

type UpdateMovieByTmdbIdRow struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	TmdbID     uint64
	Title      string
	PosterPath string
	Runtime    uint64
	Pinned     bool
	State      StateTypes
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

func (q *Queries) UpdateMovieByTmdbId(ctx context.Context, arg UpdateMovieByTmdbIdParams) (UpdateMovieByTmdbIdRow, error) {
	row := q.db.QueryRow(ctx, updateMovieByTmdbId,
		arg.TmdbID,
		arg.UserID,
		arg.State,
		arg.Pinned,
	)
	var i UpdateMovieByTmdbIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TmdbID,
		&i.Title,
		&i.PosterPath,
		&i.Runtime,
		&i.Pinned,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
