// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  login,
  email,
  encrypted_password,
  first_name,
  last_name,
  appearance
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, login, email, first_name, last_name, appearance
`

type CreateUserParams struct {
	Login             string
	Email             string
	EncryptedPassword string
	FirstName         string
	LastName          string
	Appearance        AppearanceType
}

type CreateUserRow struct {
	ID         uuid.UUID
	Login      string
	Email      string
	FirstName  string
	LastName   string
	Appearance AppearanceType
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Login,
		arg.Email,
		arg.EncryptedPassword,
		arg.FirstName,
		arg.LastName,
		arg.Appearance,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Appearance,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, login, email, encrypted_password, first_name, last_name, appearance
FROM users
WHERE email = $1 AND deleted_at IS NULL LIMIT 1
`

type FindUserByEmailRow struct {
	ID                uuid.UUID
	Login             string
	Email             string
	EncryptedPassword string
	FirstName         string
	LastName          string
	Appearance        AppearanceType
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Email,
		&i.EncryptedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Appearance,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, login, email, first_name, last_name, appearance
FROM users
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

type FindUserByIdRow struct {
	ID         uuid.UUID
	Login      string
	Email      string
	FirstName  string
	LastName   string
	Appearance AppearanceType
}

func (q *Queries) FindUserById(ctx context.Context, id uuid.UUID) (FindUserByIdRow, error) {
	row := q.db.QueryRow(ctx, findUserById, id)
	var i FindUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Appearance,
	)
	return i, err
}

const findUserByLogin = `-- name: FindUserByLogin :one
SELECT id, login, email, encrypted_password, first_name, last_name, appearance
FROM users
WHERE login = $1 AND deleted_at IS NULL LIMIT 1
`

type FindUserByLoginRow struct {
	ID                uuid.UUID
	Login             string
	Email             string
	EncryptedPassword string
	FirstName         string
	LastName          string
	Appearance        AppearanceType
}

func (q *Queries) FindUserByLogin(ctx context.Context, login string) (FindUserByLoginRow, error) {
	row := q.db.QueryRow(ctx, findUserByLogin, login)
	var i FindUserByLoginRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Email,
		&i.EncryptedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Appearance,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  first_name = $2,
  last_name = $3,
  appearance = $4,
  updated_at = NOW()
WHERE id = $1
RETURNING id, login, email, first_name, last_name, appearance
`

type UpdateUserParams struct {
	ID         uuid.UUID
	FirstName  string
	LastName   string
	Appearance AppearanceType
}

type UpdateUserRow struct {
	ID         uuid.UUID
	Login      string
	Email      string
	FirstName  string
	LastName   string
	Appearance AppearanceType
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Appearance,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Appearance,
	)
	return i, err
}
