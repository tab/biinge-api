// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/controllers/people.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/controllers/people.go -destination=internal/app/controllers/people_mock.go -package=controllers
//

// Package controllers is a generated GoMock package.
package controllers

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPeopleController is a mock of PeopleController interface.
type MockPeopleController struct {
	ctrl     *gomock.Controller
	recorder *MockPeopleControllerMockRecorder
	isgomock struct{}
}

// MockPeopleControllerMockRecorder is the mock recorder for MockPeopleController.
type MockPeopleControllerMockRecorder struct {
	mock *MockPeopleController
}

// NewMockPeopleController creates a new mock instance.
func NewMockPeopleController(ctrl *gomock.Controller) *MockPeopleController {
	mock := &MockPeopleController{ctrl: ctrl}
	mock.recorder = &MockPeopleControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeopleController) EXPECT() *MockPeopleControllerMockRecorder {
	return m.recorder
}

// HandleDetails mocks base method.
func (m *MockPeopleController) HandleDetails(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDetails", w, r)
}

// HandleDetails indicates an expected call of HandleDetails.
func (mr *MockPeopleControllerMockRecorder) HandleDetails(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDetails", reflect.TypeOf((*MockPeopleController)(nil).HandleDetails), w, r)
}
