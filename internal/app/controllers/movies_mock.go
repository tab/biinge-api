// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/controllers/movies.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/controllers/movies.go -destination=internal/app/controllers/movies_mock.go -package=controllers
//

// Package controllers is a generated GoMock package.
package controllers

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMoviesController is a mock of MoviesController interface.
type MockMoviesController struct {
	ctrl     *gomock.Controller
	recorder *MockMoviesControllerMockRecorder
	isgomock struct{}
}

// MockMoviesControllerMockRecorder is the mock recorder for MockMoviesController.
type MockMoviesControllerMockRecorder struct {
	mock *MockMoviesController
}

// NewMockMoviesController creates a new mock instance.
func NewMockMoviesController(ctrl *gomock.Controller) *MockMoviesController {
	mock := &MockMoviesController{ctrl: ctrl}
	mock.recorder = &MockMoviesControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoviesController) EXPECT() *MockMoviesControllerMockRecorder {
	return m.recorder
}

// HandleCreate mocks base method.
func (m *MockMoviesController) HandleCreate(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCreate", w, r)
}

// HandleCreate indicates an expected call of HandleCreate.
func (mr *MockMoviesControllerMockRecorder) HandleCreate(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreate", reflect.TypeOf((*MockMoviesController)(nil).HandleCreate), w, r)
}

// HandleDelete mocks base method.
func (m *MockMoviesController) HandleDelete(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDelete", w, r)
}

// HandleDelete indicates an expected call of HandleDelete.
func (mr *MockMoviesControllerMockRecorder) HandleDelete(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDelete", reflect.TypeOf((*MockMoviesController)(nil).HandleDelete), w, r)
}

// HandleDetails mocks base method.
func (m *MockMoviesController) HandleDetails(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDetails", w, r)
}

// HandleDetails indicates an expected call of HandleDetails.
func (mr *MockMoviesControllerMockRecorder) HandleDetails(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDetails", reflect.TypeOf((*MockMoviesController)(nil).HandleDetails), w, r)
}

// HandleList mocks base method.
func (m *MockMoviesController) HandleList(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleList", w, r)
}

// HandleList indicates an expected call of HandleList.
func (mr *MockMoviesControllerMockRecorder) HandleList(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleList", reflect.TypeOf((*MockMoviesController)(nil).HandleList), w, r)
}

// HandleUpdate mocks base method.
func (m *MockMoviesController) HandleUpdate(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleUpdate", w, r)
}

// HandleUpdate indicates an expected call of HandleUpdate.
func (mr *MockMoviesControllerMockRecorder) HandleUpdate(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdate", reflect.TypeOf((*MockMoviesController)(nil).HandleUpdate), w, r)
}
